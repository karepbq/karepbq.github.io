<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TauRen</title>
  
  <subtitle>杂记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.karepbq.com/"/>
  <updated>2018-08-13T09:57:28.000Z</updated>
  <id>http://www.karepbq.com/</id>
  
  <author>
    <name>Kare</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面试题（二）</title>
    <link href="http://www.karepbq.com/2018/08/13/%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://www.karepbq.com/2018/08/13/面试题（二）/</id>
    <published>2018-08-13T09:55:49.000Z</published>
    <updated>2018-08-13T09:57:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是IMP"><a href="#什么是IMP" class="headerlink" title="什么是IMP"></a>什么是IMP</h3><blockquote><p><code>class_getMethodImplementation(_ cls: Swift.AnyClass?, _ name: Selector) -&gt; IMP?</code></p><p>指向方法实现的函数指针</p></blockquote><h3 id="什么是isa"><a href="#什么是isa" class="headerlink" title="什么是isa"></a>什么是isa</h3><blockquote><p>是一个Class类型的指针</p><p>实例类型 isa -&gt; 类对象</p><p>类对象 isa -&gt; 元类（mete class）</p><p>元类  isa -&gt; 元类的基类（根类）</p><p>基类指向本身</p></blockquote><h3 id="什么是runTime"><a href="#什么是runTime" class="headerlink" title="什么是runTime"></a>什么是runTime</h3><blockquote><p>又指运行时，在运行时确定数据的类型，方法的调用</p></blockquote><h3 id="如何运用-Runtime-进行模型的归解档"><a href="#如何运用-Runtime-进行模型的归解档" class="headerlink" title="如何运用 Runtime 进行模型的归解档"></a>如何运用 <code>Runtime</code> 进行模型的归解档</h3><blockquote><p>利用 <code>ivar_list</code> 来获取, <code>objc_ivar_list</code> 储存着当前类对象的属性列表</p></blockquote><h3 id="介绍一下runLoop"><a href="#介绍一下runLoop" class="headerlink" title="介绍一下runLoop"></a>介绍一下runLoop</h3><blockquote><p>说白了就是一个循环，一直跑着，有事情就去做，没事情就休眠，等待被唤醒</p></blockquote><h3 id="block-为什么会有循环引用"><a href="#block-为什么会有循环引用" class="headerlink" title="block 为什么会有循环引用"></a>block 为什么会有循环引用</h3><blockquote><p>Block 会对 block中的对象进行持有操作，所以如果再对对象进行持有，就会造成循环引用</p></blockquote><h3 id="block-的解释以及在-ARC-和-MRC-下有什么不同？"><a href="#block-的解释以及在-ARC-和-MRC-下有什么不同？" class="headerlink" title="__block 的解释以及在 ARC 和 MRC 下有什么不同？"></a><code>__block</code> 的解释以及在 <code>ARC</code> 和 <code>MRC</code> 下有什么不同？</h3><blockquote><p><strong>block 在 MRC 下，使用 __</strong>block 修饰，引用计数不会 +1，在 ARC下，使用 __weak 来修饰</p></blockquote><h3 id="autoreleasepool-的使用场景和原理"><a href="#autoreleasepool-的使用场景和原理" class="headerlink" title="autoreleasepool 的使用场景和原理"></a>autoreleasepool 的使用场景和原理</h3><blockquote><p>使用场景：大量循环产生很多中间变量时</p><p>原理：当 retaincount 数大于0时，不释放。当 retainCount 是0时，就释放</p></blockquote><h3 id="TCP-与-UDP-区别-他们位于哪一层？"><a href="#TCP-与-UDP-区别-他们位于哪一层？" class="headerlink" title="TCP 与 UDP 区别,他们位于哪一层？"></a>TCP 与 UDP 区别,他们位于哪一层？</h3><blockquote><ol><li><p>TCP协议可靠；UDP协议不可靠, 原因是：TCP 当发送数据一段时间未收到返回结果时，会继续重新发送数据，而 UDP 不会重发</p></li><li><p>TCP传输数据大，UDP传输数据小</p></li><li><p>TCP 速度慢，UDP 速度快</p><p>它位于 <code>传输层</code></p></li></ol></blockquote><h3 id="TCP-流量控制"><a href="#TCP-流量控制" class="headerlink" title="TCP 流量控制"></a>TCP 流量控制</h3><blockquote><p>就是让对方的发送速度不要太快，要让接收方来的急接受</p><p>原理：利用窗口滑动来实现，意思是，在建立连接是，会给接收方一个接收的数值，大于这个数值就不再发送了</p></blockquote><h3 id="解释下tcp的慢启动特性。"><a href="#解释下tcp的慢启动特性。" class="headerlink" title="解释下tcp的慢启动特性。"></a>解释下tcp的慢启动特性。</h3><blockquote><p>跟网络的速率有关，不好解释呀 </p></blockquote><h3 id="如何用HTTP实现长连接？"><a href="#如何用HTTP实现长连接？" class="headerlink" title="如何用HTTP实现长连接？"></a>如何用HTTP实现长连接？</h3><blockquote><p>发送心跳包</p></blockquote><h3 id="HTTP2-0针对同一个域名的多个请求，会建立多少个tcp连接？"><a href="#HTTP2-0针对同一个域名的多个请求，会建立多少个tcp连接？" class="headerlink" title="HTTP2.0针对同一个域名的多个请求，会建立多少个tcp连接？"></a>HTTP2.0针对同一个域名的多个请求，会建立多少个tcp连接？</h3><blockquote><p>一个</p></blockquote><h3 id="如何使用runtime-hook一个class的某个方法，又如何hook某个instance的方法？"><a href="#如何使用runtime-hook一个class的某个方法，又如何hook某个instance的方法？" class="headerlink" title="如何使用runtime hook一个class的某个方法，又如何hook某个instance的方法？"></a>如何使用runtime hook一个class的某个方法，又如何hook某个instance的方法？</h3><blockquote><p>Method Swizzling</p></blockquote><h3 id="让你设计一种机制检测UIViewController的内存泄漏，你会怎么做？"><a href="#让你设计一种机制检测UIViewController的内存泄漏，你会怎么做？" class="headerlink" title="让你设计一种机制检测UIViewController的内存泄漏，你会怎么做？"></a>让你设计一种机制检测UIViewController的内存泄漏，你会怎么做？</h3><blockquote><p>如果Controller被释放了，但其曾经持有过的子对象如果还存在，那么这些子对象就是泄漏的可疑目标。</p></blockquote><h3 id="通过-UIImage-imageNamed-生成的对象什么时候被释放"><a href="#通过-UIImage-imageNamed-生成的对象什么时候被释放" class="headerlink" title="通过[UIImage imageNamed:]生成的对象什么时候被释放"></a>通过[UIImage imageNamed:]生成的对象什么时候被释放</h3><blockquote><p>因为他们加载图片都是有个一 Autoreleasepool 管理的,可以理解为到 autoreleasepool 结束的时候才释放。</p></blockquote><h3 id="如果页面-A-跳转到-页面-B，A-的-viewDidDisappear-方法和-B-的-viewDidAppear-方法哪个先调用？"><a href="#如果页面-A-跳转到-页面-B，A-的-viewDidDisappear-方法和-B-的-viewDidAppear-方法哪个先调用？" class="headerlink" title="如果页面 A 跳转到 页面 B，A 的  viewDidDisappear 方法和 B 的 viewDidAppear 方法哪个先调用？"></a>如果页面 A 跳转到 页面 B，A 的  <code>viewDidDisappear</code> 方法和 B 的 <code>viewDidAppear</code> 方法哪个先调用？</h3><blockquote><p>在 <code>Navigation push</code> 的情况下 <code>A</code> 页面的 <code>viewDidDisappear</code> 先调用，<code>viewDidAppear</code> 后调用</p><p>在 <code>present</code>情况下，情况则相反</p></blockquote><h3 id="ARC-的本质"><a href="#ARC-的本质" class="headerlink" title="ARC 的本质"></a>ARC 的本质</h3><blockquote><p>autorelease 的使用</p></blockquote><h3 id="解释一下-三次握手-和-四次挥手？解释一下为什么是三次握手-又为什么是-四次挥手"><a href="#解释一下-三次握手-和-四次挥手？解释一下为什么是三次握手-又为什么是-四次挥手" class="headerlink" title="解释一下 三次握手 和 四次挥手？解释一下为什么是三次握手 又为什么是 四次挥手"></a>解释一下 三次握手 和 四次挥手？解释一下为什么是三次握手 又为什么是 四次挥手</h3><blockquote><p>为了防止服务端一直等待，浪费资源</p><p>四次挥手是 Closed 时的逻辑</p></blockquote><h3 id="HTTP-请求中的-GET-和-POST-的区别，Session-和-Cookie-的区别。"><a href="#HTTP-请求中的-GET-和-POST-的区别，Session-和-Cookie-的区别。" class="headerlink" title="HTTP 请求中的 GET 和 POST 的区别，Session 和 Cookie 的区别。"></a>HTTP 请求中的 GET 和 POST 的区别，Session 和 Cookie 的区别。</h3><blockquote><p>Session 存放于服务端</p><p>Cookie 存放于客户端上</p></blockquote><h3 id="谈谈你对-HTTP-1-1，2-0-和-HTTPS-的理解。"><a href="#谈谈你对-HTTP-1-1，2-0-和-HTTPS-的理解。" class="headerlink" title="谈谈你对 HTTP 1.1，2.0 和 HTTPS 的理解。"></a>谈谈你对 HTTP 1.1，2.0 和 HTTPS 的理解。</h3><blockquote><p><em>TLS</em>: Transport Layer Security </p><p>HTTPS 是 HTTP + SSL/TSL 对原本传输的明文加密再进行传输</p></blockquote><h3 id="介绍几种锁，他们的用途和区别"><a href="#介绍几种锁，他们的用途和区别" class="headerlink" title="介绍几种锁，他们的用途和区别"></a>介绍几种锁，他们的用途和区别</h3><blockquote><ul><li><p>NSLock: 将代码放置在Lock与unLock之间，其他线程将无法访问这段代码，资源抢占</p></li><li><p>GCD，信号量：<code>dispatch_semaphore_create</code> <code>dispatch_semaphore_wait</code> <code>dispatch_semaphore_signal</code> </p></li></ul><ol><li><code>dispatch_semaphore_create</code>  创建一个信号量</li><li><code>dispatch_semaphore_wait</code>  等待信号量降低</li><li><code>dispatch_semaphore_signal</code>  提高信号量</li></ol><p>正常的使用顺序是<strong>先降低</strong>然后<strong>再提高</strong>，这两个函数通常成对使用</p></blockquote><h3 id="如何提升-tableview-的流畅度"><a href="#如何提升-tableview-的流畅度" class="headerlink" title="如何提升 tableview 的流畅度"></a>如何提升 <code>tableview</code> 的流畅度</h3><blockquote><ul><li>预估高度，不要实时计算。提前计算好，一次改变</li><li>如果没有触摸时间的地方可以使用 CALayer 代替View</li><li>把耗时的操作放到子线程</li></ul></blockquote><p>未完，待补充。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是IMP&quot;&gt;&lt;a href=&quot;#什么是IMP&quot; class=&quot;headerlink&quot; title=&quot;什么是IMP&quot;&gt;&lt;/a&gt;什么是IMP&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;class_getMethodImplementation(_ cls
      
    
    </summary>
    
    
      <category term="面试题" scheme="http://www.karepbq.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>利用 RunTime 统计用户在一个页面的停留时间</title>
    <link href="http://www.karepbq.com/2018/08/13/%E5%88%A9%E7%94%A8-RunTime-%E7%BB%9F%E8%AE%A1%E5%9C%A8%E4%B8%80%E4%B8%AA%E9%A1%B5%E9%9D%A2%E7%9A%84%E5%81%9C%E7%95%99%E6%97%B6%E9%97%B4/"/>
    <id>http://www.karepbq.com/2018/08/13/利用-RunTime-统计在一个页面的停留时间/</id>
    <published>2018-08-13T09:33:30.000Z</published>
    <updated>2018-08-13T09:55:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="没事使用-runtime-特性，Method-Swizzling-写了一个小Demo，用于统计用户在当前页面停留时间。"><a href="#没事使用-runtime-特性，Method-Swizzling-写了一个小Demo，用于统计用户在当前页面停留时间。" class="headerlink" title="没事使用 runtime 特性，Method Swizzling 写了一个小Demo，用于统计用户在当前页面停留时间。"></a>没事使用 <code>runtime</code> 特性，<code>Method Swizzling</code> 写了一个小Demo，用于统计用户在当前页面停留时间。</h3><p>代码很少主要使用 <code>class_getInstanceMethod</code>   <code>method_exchangeImplementations</code> 属性完成任务。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">enum</span> <span class="title">KeyIdentifys</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">SaveTimeFlg</span> = <span class="string">"SAVETIMEFLG"</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> currentTime: <span class="type">CFTimeInterval</span>? &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, &amp;<span class="type">KeyIdentifys</span>.<span class="type">SaveTimeFlg</span>) <span class="keyword">as</span>? <span class="type">CFTimeInterval</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> nValue = newValue &#123;</span><br><span class="line">                objc_setAssociatedObject(<span class="keyword">self</span>, &amp;<span class="type">KeyIdentifys</span>.<span class="type">SaveTimeFlg</span>, nValue <span class="keyword">as</span> <span class="type">CFTimeInterval</span>, objc_AssociationPolicy.<span class="type">OBJC_ASSOCIATION_RETAIN</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> <span class="type">VCInit</span>: <span class="type">Void</span> = &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> method_1_1 = class_getInstanceMethod(<span class="type">UIViewController</span>.<span class="keyword">self</span>, #selector(viewWillAppear(<span class="number">_</span>:))),</span><br><span class="line">            <span class="keyword">let</span> method_1_2 = class_getInstanceMethod(<span class="type">UIViewController</span>.<span class="keyword">self</span>, #selector(sw_viewWillAppear(<span class="number">_</span>:))),</span><br><span class="line">            <span class="keyword">let</span> method_2_1 = class_getInstanceMethod(<span class="type">UIViewController</span>.<span class="keyword">self</span>, #selector(viewDidDisappear(<span class="number">_</span>:))),</span><br><span class="line">            <span class="keyword">let</span> method_2_2 = class_getInstanceMethod(<span class="type">UIViewController</span>.<span class="keyword">self</span>, #selector(sw_viewDidDisappear(<span class="number">_</span>:))) <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        method_exchangeImplementations(method_1_1, method_1_2)</span><br><span class="line">        method_exchangeImplementations(method_2_1, method_2_2)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">sw_viewWillAppear</span><span class="params">(<span class="number">_</span> animation: Bool)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"<span class="subst">\(type(of: <span class="keyword">self</span>)</span>)"</span>)</span><br><span class="line">        <span class="keyword">self</span>.currentTime = <span class="number">0</span></span><br><span class="line">        <span class="keyword">self</span>.currentTime = <span class="type">CACurrentMediaTime</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">sw_viewDidDisappear</span><span class="params">(<span class="number">_</span> animation: Bool)</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> endTime = <span class="type">CACurrentMediaTime</span>() - currentTime!</span><br><span class="line">        <span class="keyword">let</span> endTimeStr = <span class="type">String</span>(format: <span class="string">"%.2f"</span>, endTime)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"<span class="subst">\(type(of: <span class="keyword">self</span>)</span>) 停留时间： <span class="subst">\(endTimeStr)</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码就是全部代码，貌似很简单 😆。</p><p>调用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="comment">// 调用</span></span><br><span class="line">     <span class="type">UIViewController</span>.<span class="type">VCInit</span></span><br><span class="line">    <span class="keyword">return</span> ture</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;没事使用-runtime-特性，Method-Swizzling-写了一个小Demo，用于统计用户在当前页面停留时间。&quot;&gt;&lt;a href=&quot;#没事使用-runtime-特性，Method-Swizzling-写了一个小Demo，用于统计用户在当前页面停留时间。&quot; 
      
    
    </summary>
    
    
      <category term="RunTime, Swift4.1" scheme="http://www.karepbq.com/tags/RunTime-Swift4-1/"/>
    
  </entry>
  
  <entry>
    <title>iOS CI (Manual Archive)</title>
    <link href="http://www.karepbq.com/2018/05/27/iOS-CI-Manual-Archive/"/>
    <id>http://www.karepbq.com/2018/05/27/iOS-CI-Manual-Archive/</id>
    <published>2018-05-27T13:30:14.000Z</published>
    <updated>2018-05-27T13:32:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自动打包"><a href="#自动打包" class="headerlink" title="自动打包"></a>自动打包</h2><p>此脚本完成从服务器下发打包任务，然后打包完成上传至服务器的过程<br>针对 ADHoc 方式的手动设置打包过程<br>步骤如下：</p><ol><li>拉取图片（可选）</li><li>使用脚本创建对应的AppIcon（可选）</li><li>根据给定的名称来组合Git地址</li><li>Git Clone</li><li>如果有图片需要替换AppIcon，就去替换AppIcon</li><li>pod repo update &amp;&amp; Pod Update</li><li>打包<ul><li>得到一个显示名称</li><li>设置 project.pbxproj 里面参数(PRODUCT_BUNDLE_IDENTIFIER，CODE_SIGN_STYLE，ProvisioningStyle，DEVELOPMENT_TEAM)</li><li>设置 info.plist 中的显示名称，以及 CFBundleIdentifier</li><li>xcodebuild clean -workspace (清理)</li><li>xcodebuild archive -workspace (打包)</li><li>xcodebuild  -exportArchive（导出）</li></ul></li><li>上传到服务器</li></ol><p><a href="https://github.com/karepbq/iOS-CI-Manual-Archive-" target="_blank" rel="noopener">Shell地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;自动打包&quot;&gt;&lt;a href=&quot;#自动打包&quot; class=&quot;headerlink&quot; title=&quot;自动打包&quot;&gt;&lt;/a&gt;自动打包&lt;/h2&gt;&lt;p&gt;此脚本完成从服务器下发打包任务，然后打包完成上传至服务器的过程&lt;br&gt;针对 ADHoc 方式的手动设置打包过程&lt;br&gt;步骤如
      
    
    </summary>
    
    
      <category term="xcodebuild,CI" scheme="http://www.karepbq.com/tags/xcodebuild-CI/"/>
    
  </entry>
  
  <entry>
    <title>URLSession 使用 DNS</title>
    <link href="http://www.karepbq.com/2018/05/26/URLSession%E4%BD%BF%E7%94%A8DNS/"/>
    <id>http://www.karepbq.com/2018/05/26/URLSession使用DNS/</id>
    <published>2018-05-26T09:37:27.000Z</published>
    <updated>2018-05-26T09:45:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用<code>Alamofire</code>网络框架时，项目中需要动态替换 <code>Proxy</code>,使用 <code>Alamofire</code> 代码如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">var</span> requestManager = <span class="type">Alamofire</span>.<span class="type">SessionManager</span>()</span><br><span class="line"><span class="keyword">let</span> cfg = <span class="type">Alamofire</span>.<span class="type">SessionManager</span>.<span class="keyword">default</span>.session.configuration</span><br><span class="line">cfg.connectionProxyDictionary = [</span><br><span class="line">kCFNetworkProxiesHTTPEnable: <span class="literal">true</span>,</span><br><span class="line">kCFNetworkProxiesHTTPPort: <span class="number">80</span>,</span><br><span class="line">kCFNetworkProxiesHTTPProxy: ip</span><br><span class="line">]</span><br><span class="line">requestManager = <span class="type">Alamofire</span>.<span class="type">SessionManager</span>(configuration: cfg)</span><br><span class="line">requestManager.request(...)</span><br></pre></td></tr></table></figure></p><p><code>connectionProxyDictionary</code>中的Proxy，需要是动态的，随时可能变化。但是使用此方法会报出一个错误</p><blockquote><p>FAILURE: Error Domain=NSURLErrorDomain Code=-999 “cancelled”</p></blockquote><p>在使用<code>Alamofire</code>时，官方推荐使用单利来完成初始化，不然就会报出上面的错误。</p><p>抱着试试的态度使用系统的<code>URLSession</code>来做这件事，代码如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dataTask: <span class="type">URLSessionDataTask</span>?</span><br><span class="line"><span class="comment">//        curl -v "http://xxxxx/uaa/apid/member/code/get" -x "47.91.236.123:80"</span></span><br><span class="line"><span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="string">"http://xxxxx/uaa/apid/member/code/get"</span>)</span><br><span class="line"><span class="keyword">let</span> configuration = <span class="type">URLSessionConfiguration</span>.<span class="keyword">default</span></span><br><span class="line">configuration.timeoutIntervalForRequest = <span class="number">30</span></span><br><span class="line">configuration.connectionProxyDictionary = [</span><br><span class="line">kCFNetworkProxiesHTTPEnable: <span class="literal">true</span>,</span><br><span class="line">kCFNetworkProxiesHTTPPort: <span class="number">80</span>,</span><br><span class="line">kCFNetworkProxiesHTTPProxy: <span class="string">"47.91.236.123"</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">let</span> session = <span class="type">URLSession</span>(configuration: configuration)</span><br><span class="line">dataTask = session.dataTask(with: url!) &#123; (data, response, error) <span class="keyword">in</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"----------------------\n"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> result = data &#123;</span><br><span class="line"><span class="keyword">let</span> str = <span class="type">String</span>(data: result, encoding: <span class="type">String</span>.<span class="type">Encoding</span>.utf8)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"result <span class="subst">\(String(describing: str)</span>)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> msg = error &#123;</span><br><span class="line"><span class="built_in">print</span>(msg.localizedDescription)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"----------------------\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line">dataTask?.resume()</span><br></pre></td></tr></table></figure></p><p>这样居然可以完成达到这个目的，然后我们就把整个Network层换了。<br>/(ㄒoㄒ)/~~<br>真是个蛋疼的问题！！！！</p><hr><p>其实使用<code>Alamofire</code>也可以完成</p><ol><li>需要监听你的<code>Ip</code>变化</li><li>变化了，就重新创建一个<code>Alamofire</code>实例<br>代码如下：<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Network</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">let</span> shared: <span class="type">SessionManager</span> = &#123;</span><br><span class="line"><span class="keyword">let</span> configuration = <span class="type">URLSession</span>.<span class="keyword">default</span></span><br><span class="line">cconfiguration.timeoutIntervalForRequest = <span class="number">30</span></span><br><span class="line">configuration.connectionProxyDictionary = [</span><br><span class="line">kCFNetworkProxiesHTTPEnable: <span class="literal">true</span>,</span><br><span class="line">kCFNetworkProxiesHTTPPort: <span class="number">80</span>,</span><br><span class="line">kCFNetworkProxiesHTTPProxy: <span class="string">"47.91.236.123"</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">return</span> <span class="type">SessionManager</span>(configuration: configuration)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><a href="https://github.com/Alamofire/Alamofire/issues/2529" target="_blank" rel="noopener">关于使用动态Proxy在Alamofire的问题</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用&lt;code&gt;Alamofire&lt;/code&gt;网络框架时，项目中需要动态替换 &lt;code&gt;Proxy&lt;/code&gt;,使用 &lt;code&gt;Alamofire&lt;/code&gt; 代码如下：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
    
      <category term="Proxy" scheme="http://www.karepbq.com/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>xcodebuild -exportArchive -allowProvisioningUpdates</title>
    <link href="http://www.karepbq.com/2018/05/15/xcodebuild-exportArchive-allowProvisioningUpdates/"/>
    <id>http://www.karepbq.com/2018/05/15/xcodebuild-exportArchive-allowProvisioningUpdates/</id>
    <published>2018-05-15T15:10:32.000Z</published>
    <updated>2018-05-15T15:14:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>更新到Xcode9.0后，之前写的自动打包脚本不可用了。原来的导出命令如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xcodebuild  -exportArchive \</span><br><span class="line">-archivePath $&#123;xcarchiveDir&#125; \</span><br><span class="line">-exportPath $&#123;archive_dir&#125; \</span><br><span class="line">-exportOptionsPlist $&#123;exportPlist&#125; \ &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure></p><p>今天运行突然报错，说是需要添加</p><blockquote><p>“-allowProvisioningUpdates”</p></blockquote><p>然后就各种查找资料，找到很多都是使用<code>fastlane</code>来实现打包的，可是我是单纯的使用 <code>xcodebuild</code>打包啊。<br>在Xcode中找了大半天，也没发现可以更好的添加该属性的地方。<br>然后查找<code>xcodebuild</code>打包命令</p><blockquote><p>xcodebuild  exportArchive –help</p></blockquote><p>看了半天，也没发现有设置改属性地方。<br>然后就看了看<code>xcodebuild</code>的参数设置，于是加入了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-allowProvisioningUpdates YES</span><br></pre></td></tr></table></figure></p><p>在导出命令后面，居然成功导出不报错了。<br>最终的导出命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xcodebuild  -exportArchive \</span><br><span class="line">-archivePath $&#123;xcarchiveDir&#125; \</span><br><span class="line">-exportPath $&#123;archive_dir&#125; \</span><br><span class="line">-exportOptionsPlist $&#123;exportPlist&#125; \</span><br><span class="line">-allowProvisioningUpdates YES &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;更新到Xcode9.0后，之前写的自动打包脚本不可用了。原来的导出命令如下&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b
      
    
    </summary>
    
    
      <category term="xcodebuild, shell" scheme="http://www.karepbq.com/tags/xcodebuild-shell/"/>
    
  </entry>
  
  <entry>
    <title>面试题（一）</title>
    <link href="http://www.karepbq.com/2018/05/14/Interview-1/"/>
    <id>http://www.karepbq.com/2018/05/14/Interview-1/</id>
    <published>2018-05-14T15:10:11.000Z</published>
    <updated>2018-05-14T15:55:12.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>如何设置实时渲染？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@IBDesignable让Interface Bulider在特定视图上执行实时渲染</span><br></pre></td></tr></table></figure></li><li><p>异步同步任务的区别？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`同步`：等待任务完成，一个接一个,顺可预测(Predictable Execution Order),通常情况在Main</span><br><span class="line">`异步`：不分先后执行顺序完成任务，顺序不可预测(Unpredictable Order)，通常在Background</span><br></pre></td></tr></table></figure></li><li><p>什么是NSError对象？<br>NSError有三部分组成，分别为 <code>Domain</code> <code>Code</code> <code>UserInfor</code><br>Domain是一个字符串，标记一个错误域</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSError(domain: &lt;#String#&gt;, code: &lt;#Int#&gt;, userInfo: &lt;#[String : Any]?#&gt;)</span><br></pre></td></tr></table></figure></li><li><p>什么是Enum？<br><code>enum</code> 是一种类型，包含了相关的一组数据</p></li><li><p>为什么使用synchronized？<br>保证在一定时间内，只有一个线程访问它</p></li><li><p>strong， weak，copy 有什么不同？<br><code>strong</code>:引用计数会增加<br><code>weak</code>:不会增加引用计数<br><code>Copy</code>: 意味着我们在创建对象时复制该对象的值</p></li><li><p>什么是ABI？<br>应用程序二进制接口</p></li><li><p>在Cocoa中有哪些常见的设计模式<br>创造性：单例（Singleton）<br>结构性: 适配器（Adapter）<br>行为：观察者(Observer)</p></li><li><p>Realm数据库的好处<br>a. 开源的DB framework<br>b. 快<br>c. ios 安卓都可以使用</p></li><li><p>Swift 优势是什么？<br>a. 类型安全<br>b. 闭包<br>c. 速度快</p></li><li><p>什么是泛型？<br>泛型可以让我们定义出灵活，且可重用的函数和类型，避免重复代码</p></li><li><p>解释 Swift 中的 lazy？<br>lazy是 Swift 中的一个关键字，他可以延迟属性的初始化时间，知道用到这个属性时，才去加载它</p></li><li><p>解释什么是 defer？<br>延迟执行，当你离开当前代码块，就会去执行</p></li><li><p>KVC 和 KCO 的区别？<br>KVC: 它是一种用间接方式访问类的属性的机制<br>KVO: 它是一种观察者模式，被观察的对象如果有改变，观察者就会收到通知</p></li><li><p>Gurad的好处？<br>可以使语句变得更简洁，避免嵌套很多层，可以使用break，return提前退出</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;如何设置实时渲染？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td c
      
    
    </summary>
    
    
      <category term="interview swift" scheme="http://www.karepbq.com/tags/interview-swift/"/>
    
  </entry>
  
  <entry>
    <title>如何创建Sequence</title>
    <link href="http://www.karepbq.com/2018/04/09/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BASequence-1/"/>
    <id>http://www.karepbq.com/2018/04/09/如何创建Sequence-1/</id>
    <published>2018-04-09T03:19:42.000Z</published>
    <updated>2018-05-15T00:04:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Sequence</code> 其实在coding中经常使用到，比如在使用 <code>Array</code>，<code>Set</code>， <code>Dictionary</code>，这些数据类型中，就会使用到。</p><p>那么什么是 <code>Sequence</code> 呢？</p><h3 id="Sequence-是一系列相同数据的集合，并且具有迭代能力。"><a href="#Sequence-是一系列相同数据的集合，并且具有迭代能力。" class="headerlink" title="Sequence 是一系列相同数据的集合，并且具有迭代能力。"></a>Sequence 是一系列相同数据的集合，并且具有迭代能力。</h3><p>常见的 Sequence 是 <code>for _ in ...</code> 循环了，它会遍历整个要输出的对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let lists = [...]</span><br><span class="line">for list in lists &#123;</span><br><span class="line">print(list)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是常见的一个循环 <code>lists</code> 集合的例子,他会依次输出lists中的值。</p><p>为什么他们具有迭代输出的能力了，原因是他们遵循了 Sequence 协议</p><h3 id="Sequence-协议部分内容"><a href="#Sequence-协议部分内容" class="headerlink" title="Sequence 协议部分内容"></a>Sequence 协议部分内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">associatedtype Iterator : IteratorProtocol</span><br><span class="line">public func makeIterator() -&gt; Self.Iterator</span><br></pre></td></tr></table></figure><ul><li>这个方法要求返回一个 Iterator ，Iterator是一个 <code>IteratorProtocol</code> 协议</li></ul><h3 id="IteratorProtocol-协议内容"><a href="#IteratorProtocol-协议内容" class="headerlink" title="IteratorProtocol 协议内容"></a>IteratorProtocol 协议内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">associatedtype Element</span><br><span class="line">public mutating func next() -&gt; Self.Element?</span><br></pre></td></tr></table></figure><ul><li>这个方法会持续返回基础序列中的下一个值，否则返回 nil</li></ul><p>那么也就是说，如果我们要自己实现一个 Sequence ，必须要遵循两点</p><ul><li>实现 <code>makeIterator()</code> 方法</li><li>创造一个<code>IteratorProtocol</code>的实现</li></ul><p>其实一个数组的运行过程也就是一下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let result = books.makeIterator()</span><br><span class="line">while let rs = result.next() &#123;&#125;</span><br></pre></td></tr></table></figure></p><p>在数组遍历时，流程大概也可以推测出来</p><ul><li>首先数组调用了 makeIterator() 方法</li><li>然后再去调用 next() 方法</li></ul><p>在 Swift4.1 中，我使用以下方法也能达成一个 Sequence</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">struct Books: Sequence, IteratorProtocol &#123;</span><br><span class="line">let names: [String]</span><br><span class="line">private var idx = 0</span><br><span class="line"></span><br><span class="line">init(names: [String]) &#123;</span><br><span class="line">self.names = names</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mutating func next() -&gt; String? &#123;</span><br><span class="line">guard idx &lt; names.count else &#123;</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br><span class="line">defer &#123;</span><br><span class="line">idx += 1</span><br><span class="line">&#125;</span><br><span class="line">return names[idx]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法值得注意的是</p><ul><li>我把 <code>idx</code>当前下标值 私有化，因为是我不想在初始化使用时，外部去干扰内部的<code>idx</code>值</li><li>在初始化时只传入书名称 定义了一个方法 <code>init(names: [String])</code></li></ul><p>最后的调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func showResult() &#123;</span><br><span class="line">for result in Books(names: [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;]) &#123;</span><br><span class="line">print(result)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// A</span><br><span class="line">// B</span><br><span class="line">// C</span><br><span class="line">// D</span><br></pre></td></tr></table></figure></p><p>如果觉得我的做法不妥，欢迎指正。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;Sequence&lt;/code&gt; 其实在coding中经常使用到，比如在使用 &lt;code&gt;Array&lt;/code&gt;，&lt;code&gt;Set&lt;/code&gt;， &lt;code&gt;Dictionary&lt;/code&gt;，这些数据类型中，就会使用到。&lt;/p&gt;
&lt;p&gt;那么什么是 &lt;cod
      
    
    </summary>
    
    
      <category term="sequence" scheme="http://www.karepbq.com/tags/sequence/"/>
    
  </entry>
  
  <entry>
    <title>Swift Collections</title>
    <link href="http://www.karepbq.com/2018/02/07/Swift-Collections/"/>
    <id>http://www.karepbq.com/2018/02/07/Swift-Collections/</id>
    <published>2018-02-06T16:32:25.000Z</published>
    <updated>2018-05-15T00:04:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <strong>Map</strong>, <strong>filter</strong>, <strong>reduce</strong> 对 swift 集合进行操作。</p><p>使用我们熟悉的 for-in 循环也是可以达到目的的，但是如果你掌握了这些特性，将会是你更方便对集合进行操作，是代码更加简洁。</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><h4 id="使用-map-遍历，他会对数组中每个数据进行操作，返回一个数组，对应相应的变换结果"><a href="#使用-map-遍历，他会对数组中每个数据进行操作，返回一个数组，对应相应的变换结果" class="headerlink" title="使用 map 遍历，他会对数组中每个数据进行操作，返回一个数组，对应相应的变换结果."></a>使用 map 遍历，他会对数组中每个数据进行操作，返回一个数组，对应相应的变换结果.</h4><p><img src="images/map.png" width="300" height="300"></p><p>使用原来的方法 for - in 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let values = [2.0, 4.0, 6.0, 8.0]</span><br><span class="line">var result: [Double] = []</span><br><span class="line">for value in values &#123;</span><br><span class="line">result.append(value*value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>map</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let values = [2.0, 4.0, 6.0, 8.0]</span><br><span class="line">let result = values.map &#123; $0 * $0 &#125;</span><br></pre></td></tr></table></figure><p>解说：</p><p><code>map</code>函数有一个参数，是一个闭包函数，在循环集合是调用它，这个闭包将集合的元素作为参数，并返回结果。map将这些结果放回到一个数组中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let values = [2.0, 4.0, 6.0, 8.0]</span><br><span class="line">let result = values.map &#123; (value) -&gt; Double in</span><br><span class="line">return value * value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码还可以简化成这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let values = [2.0, 4.0, 6.0, 8.0]</span><br><span class="line">let result = values.map &#123; value in</span><br><span class="line">return value * value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>甚至我们可以省略 return<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let values = [2.0, 4.0, 6.0, 8.0]</span><br><span class="line">let result = values.map &#123; value in</span><br><span class="line">value * value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>in</code> 关键字将参数从闭包体中分离出来。最后可以写成这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let values = [2.0, 4.0, 6.0, 8.0]</span><br><span class="line">let result = values.map &#123; $0 * $0 &#125;</span><br></pre></td></tr></table></figure><p><strong>结果的类型不限于原始数据的类型，</strong>下面这个是将整个类型映射到字符串类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let numbers: [NSNumber] = [0, 4, 10]</span><br><span class="line">let words = values.map &#123;</span><br><span class="line">NumberFormatter.localizedString(from: $0, number: .spellOut)</span><br><span class="line">&#125;</span><br><span class="line">//  [&quot;zero&quot;, &quot;four&quot;, &quot;one hundred&quot;]</span><br></pre></td></tr></table></figure><p><code>map</code> 不仅仅能操作数组，它也可以操作字典，然后返回一个数组**</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let dic = [&quot;price&quot;: 100, &quot;price2&quot;: 200]</span><br><span class="line">let result = dic.map &#123; $0.value * 10 &#125;</span><br><span class="line">// [1000, 2000]</span><br></pre></td></tr></table></figure><p>如果你不知道闭包的参数类型，Xcode是会给与提示的，<strong>快速提示</strong>可以让你更明白参数到底是什么类型。</p><p><img src="images/code.png" width="500"></p><p><strong>可以同时给如 Int 和 Double, map 会返回一个 Double 类型的数组</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let values: Set = [2.0, 4.0, 8, 10]</span><br><span class="line"></span><br><span class="line">let result = values.map &#123; $0 * 3.14159 &#125;</span><br><span class="line"></span><br><span class="line">// [6.2831799999999998, 12.56636, 25.132719999999999, 31.415900000000001]</span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><h4 id="使用filter，-会筛选符合条件的数据，匹配的数据包括进含有这些元素"><a href="#使用filter，-会筛选符合条件的数据，匹配的数据包括进含有这些元素" class="headerlink" title="使用filter， 会筛选符合条件的数据，匹配的数据包括进含有这些元素"></a>使用filter， 会筛选符合条件的数据，匹配的数据包括进含有这些元素</h4><p><code>filter</code> 有一个指定包含条件的参数，这事一个闭包，他讲来自集合的元素作</p><p>为参数，他会返回一个 <code>Bool</code> 值。</p><p><img src="images/filter.png" width="300" height="300"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let values: [Double] = [1.0, 2.0, 4.0, 11.0]</span><br><span class="line">let result = values.filter &#123; $0.truncatingRemainder(dividingBy: 2) == 0 &#125;</span><br><span class="line">// [2.0, 4.0]</span><br></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><h4 id="使用-reduce-，可以集合中的所有项目合并来创建一个新值。"><a href="#使用-reduce-，可以集合中的所有项目合并来创建一个新值。" class="headerlink" title="使用 reduce ，可以集合中的所有项目合并来创建一个新值。"></a>使用 reduce ，可以集合中的所有项目合并来创建一个新值。</h4><p><code>reduce</code> 有<code>两个</code>值，一个<code>初始化值</code>，一个<code>闭包值</code>。</p><p><img src="images/reduce.png" width="300" height="300"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let values: [Double] = [1.0, 4.0, 6.0, 11.0]</span><br><span class="line"></span><br><span class="line">let result = values.reduce(10) &#123; $0 + $1&#125;</span><br></pre></td></tr></table></figure><p><strong>初始化值：10  结果：32</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let values: [Double] = [1.0, 4.0, 6.0, 11.0]</span><br><span class="line">let result = values.reduce(0) &#123; $0 + $1&#125;</span><br></pre></td></tr></table></figure></p><p><strong><strong>初始化值：0  结果：22</strong></strong></p><p><strong>使用 reduce 可以连接字符串</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let values = [&quot;致&quot;, &quot;技&quot;, &quot;术&quot;, &quot;公众号&quot;]</span><br><span class="line">let result = values.reduce(&quot;&quot;) &#123; $0 + $1&#125;</span><br><span class="line">// 致技术公众号</span><br></pre></td></tr></table></figure><h3 id="FlatMap"><a href="#FlatMap" class="headerlink" title="FlatMap"></a>FlatMap</h3><h4 id="flatMap-可以将一个一系列的集合，平铺开来。"><a href="#flatMap-可以将一个一系列的集合，平铺开来。" class="headerlink" title="flatMap 可以将一个一系列的集合，平铺开来。"></a>flatMap 可以将一个一系列的集合，平铺开来。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let values = [[1,2],[3,4],[5,6]]</span><br><span class="line">let result = values.flatMap &#123; $0 &#125;</span><br><span class="line">// [1, 2, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure><p><code>flatMap</code> 可以去掉数组中 <code>nil</code> 的元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let values = [[1,2],[3,4],[5,6]]</span><br><span class="line">let result = values.flatMap &#123; $0 &#125;</span><br><span class="line">// [1, 2, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure><p>对于在对一系列集合做平铺时，我们可以对结果进行筛选处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let values = [[1,2],[3,4],[5,6]]\</span><br><span class="line">let result = values.flatMap &#123;</span><br><span class="line">$0.filter&#123; $0%2==0 &#125;</span><br><span class="line">&#125;</span><br><span class="line">// [2, 4, 6]</span><br></pre></td></tr></table></figure><p>或者是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let values = [[1,2],[3,4],[5,6]]</span><br><span class="line">let result = values.flatMap &#123;</span><br><span class="line">$0.map&#123; $0*$0 &#125;</span><br><span class="line">&#125;</span><br><span class="line">// [1, 4, 9, 16, 25, 36]</span><br></pre></td></tr></table></figure></p><p>把一系列集合相加，最终的到一个值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let values = [[1,2],[3,4],[5,6]]</span><br><span class="line">let result = values.map &#123; $0.reduce(0, &#123; $0 + $1&#125; )&#125;.reduce(0, &#123;$0 + $1&#125;)</span><br><span class="line">// 21</span><br></pre></td></tr></table></figure><h4 id="总结一哈："><a href="#总结一哈：" class="headerlink" title="总结一哈："></a>总结一哈：</h4><ul><li><p><code>map</code>返回一个<code>Array</code>包含将结果应用于每个项目的结果。</p></li><li><p><code>filter</code>返回<code>Array</code>仅包含与包含条件相匹配的项目。</p></li><li><p><code>reduce</code> 通过调用每个项目的组合闭包以初始值返回单个值。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用 &lt;strong&gt;Map&lt;/strong&gt;, &lt;strong&gt;filter&lt;/strong&gt;, &lt;strong&gt;reduce&lt;/strong&gt; 对 swift 集合进行操作。&lt;/p&gt;
&lt;p&gt;使用我们熟悉的 for-in 循环也是可以达到目的的，但是如果你掌握了这些特性，
      
    
    </summary>
    
    
      <category term="Swift, Map, Filter, Reduce" scheme="http://www.karepbq.com/tags/Swift-Map-Filter-Reduce/"/>
    
  </entry>
  
  <entry>
    <title>pull和fetch的区别</title>
    <link href="http://www.karepbq.com/2017/10/19/pull%E5%92%8Cfetch%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.karepbq.com/2017/10/19/pull和fetch的区别/</id>
    <published>2017-10-19T06:41:24.000Z</published>
    <updated>2018-05-15T00:05:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>git pull和fetch的区别</p><p><code>git fetch origin</code> 会抓取从你上次克隆以来别人上传到此远程仓库中的所有更新（或是上次 fetch 以来别人提交的更新）。有一点很重要，需要记住，fetch 命令只是将<code>远端的数据拉到本地仓库，并不自动合并到当前工作分支</code>，只有当你确实准备好了，才能手工合并。</p><p><code>git pull</code> 命令自动抓取数据下来，然后将<code>远端分支自动合并到本地仓库中当前分支</code>。在日常工作中我们经常这么用，既快且好。实际上，默认情况下 git clone 命令本质上就是自动创建了本地的 master 分支用于跟踪远程仓库中的 master 分支（假设远程仓库确实有 master 分支）。所以一般我们运行 git pull，目的都是要从原始克隆的远端仓库中抓取数据后，合并到工作目录中的当前分支。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;git pull和fetch的区别&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git fetch origin&lt;/code&gt; 会抓取从你上次克隆以来别人上传到此远程仓库中的所有更新（或是上次 fetch 以来别人提交的更新）。有一点很重要，需要记住，fetch 命令只是将&lt;code&gt;远端的
      
    
    </summary>
    
    
      <category term="git" scheme="http://www.karepbq.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>删除远程分支命令解读</title>
    <link href="http://www.karepbq.com/2017/10/19/%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E5%91%BD%E4%BB%A4%E8%A7%A3%E8%AF%BB/"/>
    <id>http://www.karepbq.com/2017/10/19/删除远程分支命令解读/</id>
    <published>2017-10-19T06:08:55.000Z</published>
    <updated>2018-05-15T00:04:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>Git 使我们经常在项目中使用的版本管理工具之一，初次使用删除远程分支的命令感到很奇怪，命令是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin :topic</span><br></pre></td></tr></table></figure></p><p><code>topic</code> 是我的一个分支，</p><p>git 推送远程分支格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git  push origin &lt;src&gt;:&lt;dst&gt;</span><br></pre></td></tr></table></figure></p><p>git 推送远程分支示例命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master:topic</span><br></pre></td></tr></table></figure></p><p>意思为：将 master 内容推送到 topic 分支上</p><p>如果用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin :topic</span><br></pre></td></tr></table></figure></p><p>因为<code>推送远程分支</code>的格式是 <code>git  push origin &lt;src&gt;:&lt;dst&gt;</code>, 通过把 <src> 部分留空的方式，这个意思是是把远程的 topic 分支变成空，也就是删除它。</src></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Git 使我们经常在项目中使用的版本管理工具之一，初次使用删除远程分支的命令感到很奇怪，命令是这样的：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="orgin" scheme="http://www.karepbq.com/tags/orgin/"/>
    
  </entry>
  
  <entry>
    <title>Protocol buffer for iOS</title>
    <link href="http://www.karepbq.com/2017/08/28/Protocol-buffer-for-iOS/"/>
    <id>http://www.karepbq.com/2017/08/28/Protocol-buffer-for-iOS/</id>
    <published>2017-08-28T09:19:25.000Z</published>
    <updated>2018-05-15T00:03:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Protocol-buffer-简单简介"><a href="#Protocol-buffer-简单简介" class="headerlink" title="Protocol buffer 简单简介"></a>Protocol buffer 简单简介</h3><p>protocol buffer是Google发布的轻便高效的结构化数据存储格式，与平台无关，内部采用了特殊的算法，让数据包边的更小，如果在网络传输时，有可能你会用到它。<a href="https://developers.google.com/protocol-buffers/" target="_blank" rel="noopener">官方网址</a></p><h2 id="这里只讲如何引用-不讲过多代码"><a href="#这里只讲如何引用-不讲过多代码" class="headerlink" title="这里只讲如何引用, 不讲过多代码"></a>这里只讲如何引用, 不讲过多代码</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>可以参考这个文章，将的很详细。<a href="https://www.ibm.com/developerworks/cn/linux/l-cn-gpb/" target="_blank" rel="noopener">原理</a></p><h3 id="支持平台"><a href="#支持平台" class="headerlink" title="支持平台"></a>支持平台</h3><p>期初支持很少的平台，但是目前已经支持很多平台，诸如：Java, Object-c, Pythod, PHP 等。<br>具体可以在这里找到<a href="https://github.com/google/protobuf/releases" target="_blank" rel="noopener">支持平台</a>，当然<a href="https://github.com/google/protobuf" target="_blank" rel="noopener">git</a>项目的简介里面也会讲到支出的平台。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>具体使用有两种方式</p><ol><li>使用CocoaPod, 具体操作可以看<a href="https://github.com/alexeyxo/protobuf-objc" target="_blank" rel="noopener">这里的文章</a>。</li><li>使用源码添加到项目</li></ol><p>我们着重讲一下，具体用代码的方式添加使用。</p><h3 id="Protoc-安装"><a href="#Protoc-安装" class="headerlink" title="Protoc 安装"></a>Protoc 安装</h3><p>在这之前我们需要安装一些工具包，这些工具包都是本地生产 Protoc 命令所要使用到的。在使用 protoc 生成文件之前，必须确保安装了以下工具包。不然就不会成功。具体安装命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install automake</span><br><span class="line">brew install libtool</span><br><span class="line">brew install protobuf</span><br></pre></td></tr></table></figure><h3 id="具体生成-protoc"><a href="#具体生成-protoc" class="headerlink" title="具体生成 protoc"></a>具体生成 protoc</h3><p>去<a href="https://github.com/google/protobuf/releases" target="_blank" rel="noopener">官网</a>下载源码后，分别运行一下命令：<br><img src="images/protobufimg.png" alt="下载包截图"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">unzip protobuf-objectivec-3.4.0.zip</span><br><span class="line">cd protobuf-3.4.0</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make check</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>安装完毕，不出意外，在就可以在 iTerminal 里面打出 protoc<br>具体：<img src="images/protol.png" alt="protol图片"></p><h3 id="生产protocol文件"><a href="#生产protocol文件" class="headerlink" title="生产protocol文件"></a>生产protocol文件</h3><ol><li>创建 <code>.proto</code> 文件，具体格式数据类型要求可以参考 <a href="https://developers.google.com/protocol-buffers/docs/encoding" target="_blank" rel="noopener">encoding</a>  <code>[Note: proto3 和 proto2 规范是不同的]</code></li><li>这里我就创建了两个字段，文件名称为 <code>Person.proto</code><br><img src="images/protocolfield.png" alt="protocol field"></li><li>运行 <code>protoc --proto_path=. --objc_out=. Person.proto</code> 会生产两个文件 <code>Person.pbobjc.h</code> 和 <code>Person.pbobjc.m</code></li></ol><h3 id="项目引用"><a href="#项目引用" class="headerlink" title="项目引用"></a>项目引用</h3><ol><li><p>建立项目 ProtocolBF</p></li><li><p>在项目里面创建 ProtocloBufferFile 文件夹</p></li><li><p>把 protobuf-3.4.0/objectivec 下的全部内容复制到<br>ProtocloBufferFile 文件夹中 (你可以自行去掉Test部分，当然也可以不去掉，这取决于你)<br><img src="images/pro.png" alt="pro图片"></p></li><li><p>在项目里面添加文件 <img src="images/addpro1.png" alt="add file"></p></li><li><p>添加<code>libProtocolBuffers.a</code> <img src="images/addpro2.png" alt="add file"></p></li><li><p>添加<code>Header search paths</code><br><code>格式为：$(PROJECT)/存放protobuf文件的目录名称</code>，在这里是<code>ProtocloBufferFile</code>，也就是<code>$(PROJECT)/ProtocloBufferFile</code> <img src="images/addpro3.png" alt="add file"></p></li></ol><ol><li><p>然后添加生成的Person.pbobjc.* 文件以及 Person.proto 文件, 因为 他不支持Arc 所以的加上 <code>-fno-objc-arc</code><br><img src="images/addpro4.png" alt="add file"></p></li><li><p>然后编译成功。</p><h3 id="具体应用代码"><a href="#具体应用代码" class="headerlink" title="具体应用代码"></a>具体应用代码</h3><p>这里主要讲了引用，具体用法还得自己去研究哦！<br><img src="images/detailsimport.png" alt="add file"></p><p>代码<a href="https://github.com/karepbq/ProtocolBuffer" target="_blank" rel="noopener">Github</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Protocol-buffer-简单简介&quot;&gt;&lt;a href=&quot;#Protocol-buffer-简单简介&quot; class=&quot;headerlink&quot; title=&quot;Protocol buffer 简单简介&quot;&gt;&lt;/a&gt;Protocol buffer 简单简介&lt;/h3&gt;&lt;
      
    
    </summary>
    
    
      <category term="PB" scheme="http://www.karepbq.com/tags/PB/"/>
    
  </entry>
  
  <entry>
    <title>Rust</title>
    <link href="http://www.karepbq.com/2017/08/05/Rust/"/>
    <id>http://www.karepbq.com/2017/08/05/Rust/</id>
    <published>2017-08-04T16:32:25.000Z</published>
    <updated>2017-08-04T16:52:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>Rust 是一个注重安全与速度的现代系统编程语言。</p><p>过多的不说了，本章说说如何安装环境，并运行第一个 <code>Hello, Rust</code></p><h3 id="Rust官方地址"><a href="#Rust官方地址" class="headerlink" title="Rust官方地址"></a><a href="https://www.rust-lang.org/en-US/install.html" target="_blank" rel="noopener">Rust官方地址</a></h3><p>中文资料</p><ul><li><a href="http://www.uoota.com/blog/type/rust" target="_blank" rel="noopener">Rust中文资料</a></li><li><a href="http://rustbook.cn/content/README%20介绍.html" target="_blank" rel="noopener">Rust中文资料</a></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在 iTerm2 中运行：sudo /usr/local/lib/rustlib/uninstall.sh</span><br></pre></td></tr></table></figure><p>然后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir ~/projects</span><br><span class="line">$ cd ~/projects</span><br><span class="line">$ mkdir hello_world</span><br><span class="line">$ cd hello_world</span><br></pre></td></tr></table></figure></p><p>创建一个以<code>.rs</code> 结尾的文件例如: hello_world.rs, 在里面添加文字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    println!(&quot;Hello, world!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rustc hello_world.rs</span><br><span class="line">$ ./main</span><br></pre></td></tr></table></figure><p>之后就会出现<code>Hello, world</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Rust 是一个注重安全与速度的现代系统编程语言。&lt;/p&gt;
&lt;p&gt;过多的不说了，本章说说如何安装环境，并运行第一个 &lt;code&gt;Hello, Rust&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;Rust官方地址&quot;&gt;&lt;a href=&quot;#Rust官方地址&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.karepbq.com/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>grep(常用)</title>
    <link href="http://www.karepbq.com/2017/07/22/grep/"/>
    <id>http://www.karepbq.com/2017/07/22/grep/</id>
    <published>2017-07-22T00:34:57.000Z</published>
    <updated>2017-07-22T00:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>grep是一个很大的命令，可以搜索文件，也可以搜索一个文本内的字符，使用过的人相信一定会喜欢上她 ^_^。</p><h2 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h2><p>先简单介绍几个常用的参数。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-i (ignore-case) 忽略大小写</span><br><span class="line"></span><br><span class="line">-n (line-number) 显示行号</span><br><span class="line"></span><br><span class="line">-c (count) 统计次数</span><br><span class="line"></span><br><span class="line">-r 递归查找</span><br><span class="line"></span><br><span class="line">-o 只显示查找到的项</span><br><span class="line"></span><br><span class="line">-v 反转查找</span><br><span class="line"></span><br><span class="line">-W 精确查找</span><br></pre></td></tr></table></figure></p><p>比如我现在要查找Pay.h里面’pay’字符出现了多少次。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat Pay.h | grep -c <span class="string">"pay"</span></span><br></pre></td></tr></table></figure></p><p>再如，我查找一个文件里面的字符‘pay’,不管大小都统计出来<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat Pay.h | grep -c -i <span class="string">"pay"</span></span><br></pre></td></tr></table></figure></p><p>如果要显示行号，那么加上<code>-n</code>即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat Pay.h | grep -n <span class="string">"pay"</span></span><br></pre></td></tr></table></figure></p><p>例如：我要查找不是以#开始的行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat Pay.h | grep -v <span class="string">"#"</span></span><br></pre></td></tr></table></figure></p><p>例如：我要查找”inet”<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig | grep -w <span class="string">"inet"</span></span><br></pre></td></tr></table></figure></p><h2 id="grep的正则表达式"><a href="#grep的正则表达式" class="headerlink" title="grep的正则表达式"></a>grep的正则表达式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">"^"</span> 锚定行的开始 如：<span class="string">'^typedef'</span>匹配所有以typedef开头的行。</span><br><span class="line"></span><br><span class="line"><span class="string">"$"</span> 锚定行的结束 如：<span class="string">'typedef$'</span>匹配所有以typedef结尾的行。</span><br></pre></td></tr></table></figure><p>例如：查找所有以##开头的行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat Pay.h | grep -n <span class="string">"^##"</span></span><br></pre></td></tr></table></figure></p><p>例如：查找文件里，所有以逗号结束的行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat Pay.h | grep -n <span class="string">"。$"</span></span><br></pre></td></tr></table></figure></p><h2 id="文件查找"><a href="#文件查找" class="headerlink" title="文件查找"></a>文件查找</h2><p>例如我要查找当前目录及其子目录的所有png图片<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep .png . -r -n -o</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;grep是一个很大的命令，可以搜索文件，也可以搜索一个文本内的字符，使用过的人相信一定会喜欢上她 ^_^。&lt;/p&gt;
&lt;h2 id=&quot;常规&quot;&gt;&lt;a href=&quot;#常规&quot; class=&quot;headerlink&quot; title=&quot;常规&quot;&gt;&lt;/a&gt;常规&lt;/h2&gt;&lt;p&gt;先简单介绍几个常用
      
    
    </summary>
    
    
      <category term="grep" scheme="http://www.karepbq.com/tags/grep/"/>
    
  </entry>
  
  <entry>
    <title>find 的使用</title>
    <link href="http://www.karepbq.com/2017/07/22/find%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.karepbq.com/2017/07/22/find的使用/</id>
    <published>2017-07-21T23:22:36.000Z</published>
    <updated>2018-05-15T00:03:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>find使用<br>find使我们经常使用的一个命令，也是很简单的一个命令。学习他，有利于提供我们的工作效率哦。（着一片文章记载的，有一些是和上一章文章中的<code>grep</code>,结合使用的）</p><p>比如：我要查找一首MP3,名字叫：末班车的歌曲<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">"*.mp3"</span> | grep -i 末班车</span><br></pre></td></tr></table></figure></p><p>其中<code>|</code>的作用是，把find查找的结果传递给后面的命令使用。</p><p>例如：查找mp3，但是不要出现”kugou”  “timedo” “time do” “shuangyue” “网易” “PomodoroWorks” “番茄” 这些字样，意思为，不要显示这些文件目录中的mp3。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">"*.mp3"</span> | grep -v -i <span class="string">'kugou\|timedo\|time do\|shuangyue\|网易\|PomodoroWorks\|番茄’</span></span><br></pre></td></tr></table></figure></p><p>上面这个等同于<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">"*.mp3"</span> | egrep -v -i <span class="string">'kugou|timedo|time do|shuangyue|网易|PomodoroWorks|番茄'</span></span><br></pre></td></tr></table></figure></p><p>例如:我想在一条grep命令中查找‘linuxtechi’和‘root’单词，使用<code>-e</code>参数，我们可以查找多个模式。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -e <span class="string">"linuxtechi"</span> -e <span class="string">"root"</span> /etc/passwd</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-<span class="built_in">type</span> 只寻找符号指定的文件类型的文件</span><br><span class="line"></span><br><span class="line">-f 普通文件</span><br><span class="line"></span><br><span class="line">-i 忽略大小写</span><br><span class="line"></span><br><span class="line">-o 多个文件一起查找</span><br></pre></td></tr></table></figure><p>查找“tecmint.txt” 然后删除掉<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> f -name <span class="string">"tecmint.txt"</span> -<span class="built_in">exec</span> rm -f &#123;&#125; \;</span><br></pre></td></tr></table></figure></p><p>查找以”.txt”结尾的文件，然后全部删除掉<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> f -name <span class="string">"*.txt"</span> -<span class="built_in">exec</span> rm -f &#123;&#125; \;</span><br></pre></td></tr></table></figure></p><p>忽略大小写查找<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -iname <span class="string">"*.txt"</span></span><br></pre></td></tr></table></figure></p><p>当前目录及其子目录查找所有以.txt 和 .pdf结尾的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name “*.txt” -o -name “*.pdf”</span><br></pre></td></tr></table></figure></p><p>在工作中，经常遇到要把查到的东西写入到一个文件中，可以使用这个命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Find . -<span class="built_in">type</span> f -name “*.txt” -<span class="built_in">exec</span> cat &#123;&#125; \;&gt;out.txt</span><br></pre></td></tr></table></figure></p><p>等同于<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">"*.txt"</span> | tee out.txt</span><br></pre></td></tr></table></figure></p><p>把查到的文件cp到另一个目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> f -name <span class="string">"*.mp3"</span> -<span class="built_in">exec</span> cp &#123;&#125; /Users/kare/Desktop \;</span><br></pre></td></tr></table></figure></p><h2 id="find-and-sed"><a href="#find-and-sed" class="headerlink" title="find and sed"></a>find and sed</h2><p>sed 格式如下<br>sed -i “.文件类型” “s/被替换之前的内容/要替换的内容/g”</p><p>使用 <code>-i</code> 才会写入文件</p><p>此命令用到了find，sed.这句的意思是查找当前目录及其子目录的.m文件，然后把</p><p>“@end -(BOOL)needInputView{ return NO; }”</p><p>改成</p><p>“-(BOOL)needInputView{ return NO; } @end”<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">"*.m"</span> -<span class="built_in">type</span> f | xargs sed -i <span class="string">".m"</span> <span class="string">"s/@end -(BOOL)needInputView&#123; return NO; &#125;/-(BOOL)needInputView&#123; return NO; &#125; @end /g”</span></span><br></pre></td></tr></table></figure></p><p>这句的意思是查找当前目录及其子目录的.m文件，然后找出文件中有“手动输入”字样的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">"*.m"</span> -<span class="built_in">type</span> f | xargs grep -r <span class="string">"手动输入"</span></span><br></pre></td></tr></table></figure></p><h2 id="tee-额外"><a href="#tee-额外" class="headerlink" title="tee(额外)"></a>tee(额外)</h2><p>tee将数据重定向到文件中。</p><p>意思为将ls显示的结果写到out.txt文件中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls | tee out.txt</span><br></pre></td></tr></table></figure></p><p>意思为将ls显示的结果写到out.txt文件中,并显示行号<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls | tee out.txt | cat -n</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;find使用&lt;br&gt;find使我们经常使用的一个命令，也是很简单的一个命令。学习他，有利于提供我们的工作效率哦。（着一片文章记载的，有一些是和上一章文章中的&lt;code&gt;grep&lt;/code&gt;,结合使用的）&lt;/p&gt;
&lt;p&gt;比如：我要查找一首MP3,名字叫：末班车的歌曲&lt;br&gt;
      
    
    </summary>
    
    
      <category term="find, sed" scheme="http://www.karepbq.com/tags/find-sed/"/>
    
  </entry>
  
</feed>
